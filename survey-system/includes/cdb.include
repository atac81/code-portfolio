<?php

require_once('db.include');

class CDB extends DB {

	// general functions	
	// check if id is a potentially valid postgres id	
	// returns boolean	
	function id_validate($id)
	{
		// ids must be numbers
		if (!is_numeric($id))
			return(0);

		// and they must be positive
		if ((int)$id <= 0)
			return(0);

		// but they must be less than 2^31 - 1
		if ((int)$id > 2147483647)
			return(0);

		return(1);
	}
	
	// check if radio-type survey response is potentially valid
	// returns boolean	
	function radio_validate($radio)
	{
		if ((strlen($radio) != 1))
			return(0);

		if(!preg_match('/^[0|1|2|3|4|5]{1}$/i', $radio))
			return(0);

		return(1);
	}

	// check if a string is non-dangerous, and of the
	// specified length	
	function string_validate($string, $min_length, $max_length)	{
		// string must be greater than minimum
		// and lesser than maximum
		if ((strlen($string) < $min_length) || (strlen($string) > $max_length))
			return(0);
		
		return(1);
	}
	
	// check if date is potentially valid
	// returns boolean	
	function date_validate($date)
	{
		// date must be 10 digits in length
		if ((strlen($date) != 10))
			return(0);

		// and it must be in the format YYYY-MM-DD
		if(!preg_match('/^(20)[0-9]{2}-(01|02|03|04|05|06|07|08|09|10|11|12)-(([0][1-9])|([12][0-9])|([3][01]))$/i', $date))
			return(0);

		// and it must be a valid Gregorian date
		if (!checkdate(intval(substr($date, 5, 2)), intval(substr($date, 8, 2)), intval(substr($date, 0, 4))))
			return(0);

		return(1);
	}

	// validates the student PIN number
	// checks whether or not the given PIN is in the
	// database. If so, it checks if the given PIN is
	// currently still active (i.e. able to complete survey).
	// If the PIN is invalid, doesn't exist, or has been
	// deactivated, it returns an error code (1, 2, or 3). 
	// On success, it returns 0.
	function confirmStudentPin($pin){
		if (!$this->pin_validate($pin))
			return 1; // Indicates invalid PIN

		/* Verify that PIN is in database */
		$query = "SELECT id, name, active FROM students WHERE pin = '$pin'";
		$rc = $this->db_query($sth, $query);
		if(!$rc || ($this->db_numrows($sth) < 1)){
			return 2; // Indicates PIN failure
		}
		
		/* Retrieve active status from result, strip slashes */
		$dbobject = $this->db_fetch_object($sth);
		$dbobject->active = stripslashes($dbobject->active);
		
		/* Validate that PIN has not been deactivated */
		if($dbobject->active == "N") {
			return 3; // Indicates PIN is deactivated
		}
		else {
			return 0; // Success! PIN validated and confirmed
		}
	}
  
  // validates the student ID
	// checks whether or not the given ID is in the
	// database. If the ID is invalid or doesn't exist,
	// it returns an error code (1 or 2). 
	// On success, it returns 0.
	function confirmStudentID($studentid){
		if (!$this->studentid_validate($studentid))
			return 1; // Indicates invalid ID
			
		/* Verify that PIN is in database */
		$studentid = $this->db_encode($studentid);
		$query = "SELECT id, pin, email FROM students WHERE UPPER(studentid) = UPPER('$studentid')";
		$rc = $this->db_query($sth, $query);
		if(!$rc || ($this->db_numrows($sth) < 1)){
			return 2; // Indicates ID failure
		}
		else {
			return 0; // Success! ID validated and confirmed
		}
	}

	// checks if the user has already previously logged in, and a 
	// session with the user has already been established. Also 
	// checks to see if user has been remembered. If so, the 
	// database is queried to verify the user's authenticity. 
	// Returns true if the user has logged in.
	function checkLogin() {
		/* Verify that pin has been set as session variable */
		if (isset($_SESSION['StudentCode'])) {
			/* Confirm that the pin is valid */
			if ($this->confirmStudentID($_SESSION['StudentCode']) != 0) {
				/* Variable is incorrect, user not logged in */
				unset($_SESSION['StudentCode']);
				return false;
			}
			return true;
		}
		/* User not logged in */
		else {
			return false;
		}
	}

	// survey-related functions
  // inserts the given survey information
	// into the database. Returns true on success,
	// false otherwise.
	function insertSurveyInfo($pin, $table, $fields)
	{
		if ($this->confirmStudentPin($pin) != 0)
			return "badpin"; // Indicates invalid PIN

		/* Verify that answers have not been previously recorded for given PIN  */
		$query = "SELECT id, pin FROM answers_" . $table . " WHERE pin = '$pin'";
		$rc = $this->db_query($sth, $query);
		if (!$rc) {
			return "badselect"; // Indicates SELECT failure
		} elseif($this->db_numrows($sth) >= 1) {
			return "preventry"; // Indicates previous submission using PIN
		} else {
		
			$db_columns = "";
			$db_values = "";
			
			foreach( $fields as $key => $value ) {
				/* Standard statement questions with five radio-button options */
				if (preg_match('/statement/i', $key)) {
					if ( ($value != "") && (!$this->radio_validate($value)) )
						return "badstatement";
						
					$db_columns .= ", " . $key;
					$db_values .= ", " . $value;
				}
				/* Standard multiple choice questions with multiple radio-button options */
				if (preg_match('/multiplechoice/i', $key)) {
          /* Data validation for specific surveys with varying multiple-choice formats */
					if ( ($table == "s004") && ($value != "") && (!preg_match('/A|B|C|D|E|F/i', $value)) )
						return "badmultiplechoice";
					if ( ($table == "s005") && ($value != "") && (!preg_match('/1|2/', $value)) )
						return "badmultiplechoice";
					if ( ($table == "s006") && ($value != "") && (!preg_match('/0|1|2|3|4|5/', $value)) )
						return "badmultiplechoice";
					if ( ($table == "s007") && ($value != "") && (!preg_match('/1|2|3|4|5|6|7|8/', $value)) )
						return "badmultiplechoice";
					if ( ($table == "s009") && ($value != "") && (!preg_match('/1|2|3|4|5|6|7|8/', $value)) )
						return "badmultiplechoice";
						
					$db_columns .= ", " . $key;
					$db_values .= ", '" . $value . "'";
				}
				/* Standard open ended questions with 1500-character limit */
				if (preg_match('/openended/i', $key)) {
					if (!$this->string_validate($value, 0, 1500))
						return "badopenended";
						
					$db_columns .= ", " . $key;
					$value = htmlentities($value, ENT_QUOTES);	// Convert both double and single quotes into their HTML entities
					$value = pg_escape_string($value);			// Escape the string for insertion into the database 
					$db_values .= ", '" . $value . "'";
				}
			}
	
			$query = "INSERT INTO answers_" . $table . " (pin" . $db_columns . ") 
					  VALUES ('$pin'" . $db_values . ")";
	
			$rc = $this->db_query($sth, $query);
			if(!$rc) {
				return "badinsert"; // Indicates INSERT failure
			}
			else {
				return $rc; // Success!
			}
		}
	}
	
	// retrieve all of the survey info, based on student's pin
	function getSurveyInfo($pin)
	{
		if (!$this->pin_validate($pin))
			return "badpin"; // Indicates invalid PIN

		$query = "SELECT s.id, s.survey, u.school, u.course, u.department, u.instructor, u.semester
			  FROM students u, surveys s
			  WHERE u.survey = s.id AND u.pin = '$pin'";

		$rc = $this->db_query($sth, $query);
		if(!$rc) {
			return "badselect"; // Indicates SELECT failure
		} else {
			$rv = $this->db_fetch_object($sth);
			
			$rv->survey = stripslashes($rv->survey);
			$rv->school = stripslashes($rv->school);
			$rv->course = stripslashes($rv->course);
			$rv->department = stripslashes($rv->department);
			$rv->instructor = stripslashes($rv->instructor);
			$rv->semester = stripslashes($rv->semester);
	
			return($rv); // Success!
		}
	}
  
}
?>
